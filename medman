#!/usr/bin/env python3

# TODO: Need to add in an initialization checking engine

import os, sys, json, imp


DEFAULT_MODPATH = "./modules/"

modpath = DEFAULT_MODPATH

med = None

class Medman():
	config = {}
	hooks = {}
	modules = {}

	# Get a filename from a name
	def name_to_file(self, name):
		with open(self.config["path"] + "/index.json", "r") as f:
			names = json.loads(f.read())
		if name in names.keys():
			return names[name] + "/" + name + ".json"
		else:
			print("Could not find name '{}'".format(name))
			return None

	# Handle the reading and writing to a json file
	def write_file(self, filename, js):
		# TODO: Call hooks here
		with open(self.config["path"] + "/" + filename, "w") as f:
			f.write(json.dumps(js, indent=4))



	def read_file(self, filename):
		# TODO: Call hooks here	
	
		with open(self.config["path"] + "/" + filename, "r") as f:
			data = json.loads(f.read())
		return data

	# Abstraction to handle reading and writing to a Name
	def write_name(self, name, js):
		# TODO: Call hooks here
		
		s = self.name_to_file(name)
		if s:
			self.write_file(s, js)

	def read_name(self, name):
		# TODO: Call hooks here

		s = self.name_to_file(name)
		if s:
			return self.read_file(s)

	def index_add(self, name, category):
		# TODO: Hooks?
	
		with open(self.config["path"] + "index.json", "r") as f:
			data = json.loads(f.read())

		data[name] = category + name

		with open(self.config["path"] + "index.json", "w") as f:
			f.write(json.dumps(data, indent=4))		

		os.mkdir(self.config["path"] + category + "/" + name)

		self.write_name(name, {"name":name,"files":[]})

	# Create a new category path
	def new_category(self, name):
		pass

	def get_names(self):
		# TODO: Call hooks?
		
		with open(self.config["path"] + "/" + "index.json", "r") as f:
			data = json.loads(f.read())

		# TODO: Error check this
		return list(data.keys())


	# Configuration json file loading
	def load_config(self):
	
		try:
			# TODO: Remove hard coding?
			with open(os.environ["HOME"] + "/.medman/config.json", "r") as c:
				self.config = json.loads(c.read())
		except:
			print("No config file ~/.medman/config.json found!")
			exit(1)

		# Define required data in the config file here
		fail = False
		if "path" not in self.config.keys():
			print("Path not specified in config file!")
			fail = True

		if fail:
			exit(1)

		# OPTIMIZE: Handle ~ -> /home/user better
		self.config["path"] = self.config["path"].replace("~", os.environ["HOME"] + "/") + "/" 

	def _load_hook(self, mod):
		for k in mod.hooks.keys():
			if f not in self.hooks.keys():
				self.hooks[k] = []
			self.hooks[k] += mod.hooks[k]
			self.hooks[k].sort()


	# Load ALL hooks (as dynamic hooks loading is probably pointless?
	def load_hooks(self):
		for f in os.listdir("hooks/"):
			if f[-2:] == "py":
				continue
			file, pathname, desc = imp.find_module("hooks/" + f[:-3])
			mod = imp.load_module(f[:-3], file, pathname, desc)

			if "hooks" not in dir(mod):
				del mod
				continue
			self._load_hook(mod)


	def run_mod(self, name, args):
		if name not in self.modules:
			if not self.load(name):
				print("Unknown module '{}'".format(name))
				return False

		return self.modules[name](med, args)



	def load(self, name):
	
		file, pathname, desc = imp.find_module(modpath + "/" + name)
		mod = imp.load_module(name, file, pathname, desc)
	
		if "medman_" + name not in dir(mod):
			return False
	
		self.modules[name] = eval("mod.medman_" + name)
	
		return True
	
	def create_categories(self, categories):
		# TODO: Hooks, here

		os.makedirs(self.config["path"] + categories, exist_ok=True)

	def create_name(self, name, categories=""):
		# TODO: Hooks, here

		if categories != "" and categories[-1] != "/":
			categories += "/"

		self.index_add(name, categories)
		


def main(med):
	# TODO: Handle more in this?
	#commands[sys.argv[1]](med, sys.argv[2:])
	med.run_mod(sys.argv[1], sys.argv[2:])


if __name__ == "__main__":
	if len(sys.argv) < 2:
		print("Need some arguments")
		exit(0)
	med = Medman()
	med.load_config()
	med.load_hooks()
	main(med)
